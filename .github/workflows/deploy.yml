name: Pipeline
on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run checks
        run: deno task check

      - name: Install Playwright Chromium
        run: npx playwright install chromium --with-deps

      - name: Start server
        run: deno task start > server.log 2>&1 &
        env:
          DENO_SERVER_PID: $!
        timeout-minutes: 5

      - name: Wait for server to start
        run: sleep 5

      - name: Run tests
        run: deno test --allow-all

      - name: Stop server
        if: always()
        run: |
          if [ -n "$DENO_SERVER_PID" ]; then
            kill $DENO_SERVER_PID
            echo "Deno server (PID: $DENO_SERVER_PID) has been killed."
          else
            echo "No Deno server process found."
          fi

  release:
    name: Semantic Release
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_OUTPUT=$(npx semantic-release --dry-run)
          if echo "$RELEASE_OUTPUT" | grep -q "The next release version is"; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            VERSION=$(echo "$RELEASE_OUTPUT" | grep -o "The next release version is [0-9]\+\.[0-9]\+\.[0-9]\+" | awk '{print $6}')
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi
          npx semantic-release

  deploy:
    name: Deploy
    needs: [test, release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Build step
        run: deno task build

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "seangreen"
          entrypoint: "main.ts"
          root: "."
